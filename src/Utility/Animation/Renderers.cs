using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;

namespace Utility.Animation
{
    public static class Renderer
    {

        /// <summary>
        /// Render a single frame
        /// </summary>
        /// <param name="result"></param>
        /// <param name="graphic"></param>
        public static void Render(this Graphics result, Graphic graphic)
        {
            var attr = new ImageAttributes();
            attr.SetColorMatrix(
                new ColorMatrix { Matrix33 = (float)graphic.Style.Alpha },
                ColorMatrixFlag.Default,
                ColorAdjustType.Bitmap);

            result.FillRectangle(Brushes.Black, new Rectangle(0, 0, graphic.Style.Width, graphic.Style.Height));

            result.DrawImage(graphic.Image,
                graphic.Style.AsRectangle,
                0,0,graphic.Image.Width, graphic.Image.Height, //draw entire image
                GraphicsUnit.Pixel, attr);
        }

        /// <summary>
        /// Render the frame to a Bitmap
        /// </summary>
        /// <param name="frame"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <returns></returns>
        public static Bitmap Render(this Frame frame, int width, int height)
        {
            var result = new Bitmap(width, height);
            using (var graphics = Graphics.FromImage(result))
            {
                frame.Graphics.ForEach(graphics.Render);
            }
            return result;
        }


        /// <summary>
        /// Render the Timeline into individual frames
        /// </summary>
        /// <param name="video"></param>
        /// <returns></returns>
        public static List<Bitmap> Render(this Video video)
        {
            //keep a history of styles generated by the tweens
            var styles = new Dictionary<int, GraphicStyle>();

            var results = video.Timeline.Tweens.SelectMany(tween =>
            {
                //if we have a previous style for this tween, apply it now
                if (styles.ContainsKey(tween.Id)) tween.From = styles[tween.Id];

                //the current tween end is saved to use for the next tween on this graphic
                styles[tween.Id] = tween.To;

                //return the frames generated
                return tween.Results;
            });

            //render the frames into bitmaps
            return results.Select(frame => frame.Render(video.Width, video.Height)).ToList();
        }
    }
}
